# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Setup go...
      uses: actions/setup-go@v5.0.2
      with:
        go-version: "^1.22.0"

    - name: Install depends of go-musicfox
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get install libflac-dev libasound2-dev dbus libdbus-1-dev
    
    - name: Install Qt for Linux
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@f03f05556819ceb3781ee2f455ec44c339d683c0
      uses: jurplel/install-qt-action@v4.0.0
      if: runner.os == 'Linux'
      with:
        # Version of Qt to install
        version: 5.15.2
        
    - name: Install Qt Static for Windows MinGW
      if: ${{ (runner.os == 'Windows') && (matrix.c_compiler == 'gcc') }}
      uses: orestonce/install-qt-static@v0.4.3
      with:
        version: Qt6.5.3-Windows-x86_64-MinGW13.2.0-ucrt-staticFull-20240527

    - name: Prepare VS Shell
      if: ${{ (runner.os == 'Windows') && (matrix.c_compiler == 'cl') }}
      uses: egor-tensin/vs-shell@v2

    - name: Install Qt Static for Windows CL
      if: ${{ (runner.os == 'Windows') && (matrix.c_compiler == 'cl') }}
      shell: pwsh
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        git clone https://code.qt.io/qt/qt5.git qt
        cd qt
        git switch 6.5.3
        perl init-repository --module-subset=qtbase
        mkdir build
        cd build
        ../configure.bat -prefix ${{ runner.temp }}/Qt-static -release -static -static-runtime -opensource -nomake examples -nomake tests -submodules qtbase -- -DQT_BUILD_TESTS=OFF
        cmake --build .
        cmake --install .
        Add-Content $env:GITHUB_PATH "${{ runner.temp }}\Qt-static\bin"
        
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: runner.os == 'Linux'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: matrix.c_compiler == 'cl'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}/Qt-static
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ (runner.os == 'Windows') && (matrix.c_compiler == 'gcc') }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G "MinGW Makefiles"
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      if: ${{ (runner.os == 'Linux') || (matrix.c_compiler == 'cl') }}
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      
    - name: Build
      if: ${{ (runner.os == 'Windows') && (matrix.c_compiler == 'gcc') }}
      shell: pwsh
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }} && mingw32-make
      
    - name: Upload lyric-for-musicfox-linux
      uses: actions/upload-artifact@v4.6.2
      if: runner.os == 'Linux'
      with:
        # Artifact name
        name: lyric-for-musicfox-linux-${{ matrix.c_compiler }}
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/lyric-for-musicfox"

    - name: Upload mpris-lyric-sender-linux
      uses: actions/upload-artifact@v4.6.2
      if: runner.os == 'Linux'
      with:
        # Artifact name
        name: mpris-lyric-sender-linux-${{ matrix.c_compiler }}
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/mpris-lyric-sender"
        
    - name: Upload lyric-for-musicfox-win
      uses: actions/upload-artifact@v4.6.2
      if: runner.os == 'Windows'
      with:
        # Artifact name
        name: lyric-for-musicfox-win-${{ matrix.c_compiler }}
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/**/lyric-for-musicfox.exe"

    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        path: "${{ github.workspace }}/build/"
        pattern: lyric-for-musicfox*
        
    - name: Upload Patched go-musicfox-linux
      uses: actions/upload-artifact@v4.6.2
      if: runner.os == 'Linux'
      with:
        # Artifact name
        name: patched-go-musicfox-linux-${{ matrix.c_compiler }}
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/go-musicfox/bin/musicfox" 
        
    - name: Upload Patched go-musicfox-windows
      uses: actions/upload-artifact@v4.6.2
      if: runner.os == 'Windows'
      with:
        # Artifact name
        name: patched-go-musicfox-win
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/go-musicfox/bin/*musicfox*" 
        
    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        path: "${{ github.workspace }}/build/go-musicfox/bin/"
        pattern: musicfox*
      

