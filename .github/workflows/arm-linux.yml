# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Arm

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [aarch64-linux-gnu-gcc]
        include:
          - os: ubuntu-latest
            c_compiler: aarch64-linux-gnu-gcc
            cpp_compiler: aarch64-linux-gnu-g++
            
    steps:
    - uses: actions/checkout@v4

    - name: Setup go...
      uses: actions/setup-go@v5.0.2
      with:
        go-version: "^1.22.0"

    - name: Install depends of go-musicfox
      shell: bash
      run: |
        sudo apt-get install git libflac-dev libasound2-dev dbus libdbus-1-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Install Qt for Linux
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@f03f05556819ceb3781ee2f455ec44c339d683c0
      shell: bash
      run: |
        sudo apt-get install build-essential ninja libfontconfig1-dev libfreetype-dev libx11-dev libx11-xcb-dev libxcb-cursor-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-shm0-dev libxcb-sync-dev libxcb-util-dev libxcb-xfixes0-dev libxcb-xinerama0-dev  libxcb-xkb-dev libxcb1-dev  libxext-dev  libxfixes-dev  libxi-dev  libxkbcommon-dev  libxkbcommon-x11-dev libxrender-dev
        mkdir -p ${{ github.workspace }}/qt
        cd ${{ github.workspace }}/qt
        git clone "https://codereview.qt-project.org/qt/qt5"
        cd qt5/
        git checkout 6.5.3
        perl init-repository -f
        cd ..
        mkdir ${{ github.workspace }}/qt/qt-hostbuild
        cd ${{ github.workspace }}/qt/qt-hostbuild/
        cmake ../qt5/qtbase -GNinja -DCMAKE_BUILD_TYPE=Release -DQT_BUILD_EXAMPLES=OFF -DQT_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/qt/qt-host 
        cmake --build . --parallel
        cmake --install .
    
    - name: Install Qt for Android
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'linux'
        target: 'android'
        arch: 'android_arm64_v8a'
        install-deps: 'true'
        archives: "qtbase"
        
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Modify CMakeLists.txt
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        sed -i "s/find_package(DBus1 REQUIRED)/list(APPEND PROJECT_INCLUDE_DIRECTORIES \/usr\/lib\/dbus-1.0\/include\/ \/usr\/include\/dbus-1.0\/ \/usr\/lib\/x86_64-linux-gnu\/dbus-1.0\/include)/g" ${{ github.workspace }}/CMakeLists.txt

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=/usr/bin/${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=/usr/bin/${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DQT_HOST_PATH=${{ github.workspace }}/qt/qt-host
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      
    - name: Upload lyric-for-musicfox-linux
      uses: actions/upload-artifact@v3.2.1-node20
      if: runner.os == 'Linux'
      with:
        # Artifact name
        name: lyric-for-musicfox-linux-${{ matrix.c_compiler }}
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/lyric-for-musicfox"

    - name: Upload mpris-lyric-sender-linux
      uses: actions/upload-artifact@v3.2.1-node20
      if: runner.os == 'Linux'
      with:
        # Artifact name
        name: mpris-lyric-sender-linux-${{ matrix.c_compiler }}
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/mpris-lyric-sender"
        
    - name: Upload lyric-for-musicfox-win
      uses: actions/upload-artifact@v3.2.1-node20
      if: runner.os == 'Windows'
      with:
        # Artifact name
        name: lyric-for-musicfox-win-${{ matrix.c_compiler }}
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/**/lyric-for-musicfox.exe"

    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        path: "${{ github.workspace }}/build/"
        pattern: lyric-for-musicfox*
        
    - name: Upload Patched go-musicfox-linux
      uses: actions/upload-artifact@v3.2.1-node20
      if: runner.os == 'Linux'
      with:
        # Artifact name
        name: patched-go-musicfox-linux-${{ matrix.c_compiler }}
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/go-musicfox/bin/musicfox" 
        
    - name: Upload Patched go-musicfox-windows
      uses: actions/upload-artifact@v3.2.1-node20
      if: runner.os == 'Windows'
      with:
        # Artifact name
        name: patched-go-musicfox-win
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ github.workspace }}/build/go-musicfox/bin/*musicfox*" 
        
    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        path: "${{ github.workspace }}/build/go-musicfox/bin/"
        pattern: musicfox*
      
